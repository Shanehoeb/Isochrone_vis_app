theme(plot.title = element_text(hjust=0.5, size=15, face="bold"))
p
# First make a grid
n <- 100
pred.mat <- expand.grid(
volatile.acidity = with(df, seq(min(volatile.acidity), max(volatile.acidity), length.out = n)),
density = with(df, seq(min(density), max(density), length.out = n))
)
# Then ask for prediction on the grid
pred.mat$pred <- predict(model,pred.mat)
df$cap<-ifelse(df$quality==5,"C",ifelse(df$quality==6,"B","A"))
p<-ggplot(pred.mat, aes(volatile.acidity, density)) +
geom_point(data = df, aes(color = cap)) +
#ggplot(pred.mat, aes(x=volatile.acidity, y=density, col=pred) ) +
#geom_point(size = 2, aes(pch = pred))+
geom_contour(aes(z = as.numeric(pred == 5),
colour = "C"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 6),
color = "B"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 7),
colour = "A"),
breaks = 0.5) +
#scale_color_manual('Quality', breaks=c('A','B','C'),values=c('red','blue','green')) +
labs(x="Volatile acidity", y="Density", title="Red wine quality depending on volatile acidity and density") +
theme(plot.title = element_text(hjust=0.5, size=15, face="bold"))
p
# First make a grid
n <- 10
pred.mat <- expand.grid(
volatile.acidity = with(df, seq(min(volatile.acidity), max(volatile.acidity), length.out = n)),
density = with(df, seq(min(density), max(density), length.out = n))
)
# Then ask for prediction on the grid
pred.mat$pred <- predict(model,pred.mat)
df$cap<-ifelse(df$quality==5,"C",ifelse(df$quality==6,"B","A"))
p<-ggplot(pred.mat, aes(volatile.acidity, density)) +
geom_point(data = df, aes(color = cap)) +
#ggplot(pred.mat, aes(x=volatile.acidity, y=density, col=pred) ) +
#geom_point(size = 2, aes(pch = pred))+
geom_contour(aes(z = as.numeric(pred == 5),
colour = "C"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 6),
color = "B"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 7),
colour = "A"),
breaks = 0.5) +
#scale_color_manual('Quality', breaks=c('A','B','C'),values=c('red','blue','green')) +
labs(x="Volatile acidity", y="Density", title="Red wine quality depending on volatile acidity and density") +
theme(plot.title = element_text(hjust=0.5, size=15, face="bold"))
p
# First make a grid
n <- 60
pred.mat <- expand.grid(
volatile.acidity = with(df, seq(min(volatile.acidity), max(volatile.acidity), length.out = n)),
density = with(df, seq(min(density), max(density), length.out = n))
)
# Then ask for prediction on the grid
pred.mat$pred <- predict(model,pred.mat)
df$cap<-ifelse(df$quality==5,"C",ifelse(df$quality==6,"B","A"))
p<-ggplot(pred.mat, aes(volatile.acidity, density)) +
geom_point(data = df, aes(color = cap)) +
#ggplot(pred.mat, aes(x=volatile.acidity, y=density, col=pred) ) +
#geom_point(size = 2, aes(pch = pred))+
geom_contour(aes(z = as.numeric(pred == 5),
colour = "C"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 6),
color = "B"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 7),
colour = "A"),
breaks = 0.5) +
#scale_color_manual('Quality', breaks=c('A','B','C'),values=c('red','blue','green')) +
labs(x="Volatile acidity", y="Density", title="Red wine quality depending on volatile acidity and density") +
theme(plot.title = element_text(hjust=0.5, size=15, face="bold"))
p
p<-ggplot(pred.mat, aes(volatile.acidity, density)) +
geom_point(data = df, aes(color = cap)) +
#ggplot(pred.mat, aes(x=volatile.acidity, y=density, col=pred) ) +
#geom_point(size = 2, aes(pch = pred))+
geom_contour(aes(z = as.numeric(pred == 5),
colour = "C"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 6),
color = "B"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 7),
colour = "A"),
breaks = 0.5) +
scale_color_manual('Quality', breaks=c('A','B','C'),values=c('red','blue','green')) +
labs(x="Volatile acidity", y="Density", title="Red wine quality depending on volatile acidity and density") +
theme(plot.title = element_text(hjust=0.5, size=15, face="bold"))
p
p<-ggplot(pred.mat, aes(volatile.acidity, density)) +
geom_point(data = df, aes(color = cap)) +
#ggplot(pred.mat, aes(x=volatile.acidity, y=density, col=pred) ) +
#geom_point(size = 2, aes(pch = pred))+
geom_contour(aes(z = as.numeric(pred == 5),
colour = "C"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 6),
color = "B"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 7),
colour = "A"),
breaks = 0.5) +
scale_color_manual('Quality', breaks=c('A','B','C'),values=c('lightred','blue','green')) +
labs(x="Volatile acidity", y="Density", title="Red wine quality depending on volatile acidity and density") +
theme(plot.title = element_text(hjust=0.5, size=15, face="bold"))
p
p<-ggplot(pred.mat, aes(volatile.acidity, density)) +
geom_point(data = df, aes(color = cap)) +
#ggplot(pred.mat, aes(x=volatile.acidity, y=density, col=pred) ) +
#geom_point(size = 2, aes(pch = pred))+
geom_contour(aes(z = as.numeric(pred == 5),
colour = "C"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 6),
color = "B"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 7),
colour = "A"),
breaks = 0.5) +
scale_color_manual('Quality', breaks=c('A','B','C'),values=c('brown1','blue','green')) +
labs(x="Volatile acidity", y="Density", title="Red wine quality depending on volatile acidity and density") +
theme(plot.title = element_text(hjust=0.5, size=15, face="bold"))
p
df$Quality<-ifelse(df$quality==5,"C",ifelse(df$quality==6,"B","A"))
p<-ggplot(pred.mat, aes(volatile.acidity, density)) +
geom_point(data = df, aes(color = Quality)) +
#ggplot(pred.mat, aes(x=volatile.acidity, y=density, col=pred) ) +
#geom_point(size = 2, aes(pch = pred))+
geom_contour(aes(z = as.numeric(pred == 5),
colour = "C"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 6),
color = "B"),
breaks = 0.5) +
geom_contour(aes(z = as.numeric(pred == 7),
colour = "A"),
breaks = 0.5) +
#scale_color_manual('Quality', breaks=c('A','B','C'),values=c('brown1','blue','green')) +
labs(x="Volatile acidity", y="Density", title="Red wine quality depending on volatile acidity and density") +
theme(plot.title = element_text(hjust=0.5, size=15, face="bold"))
p
library(shiny); runApp('Rstudio/census-app/census-app.R')
data
df
dt
x
a<-c(1,2,3,4,5)
a[a<=3]
a[a<=3 & a>=1]
a[a<=3 & a>=2]
runApp('Rstudio/census-app/census-app.R')
runApp('Rstudio/census-app/census-app.R')
runApp('Rstudio/census-app/census-app.R')
runApp('Rstudio/census-app/census-app.R')
runApp('Rstudio/census-app/census-app.R')
keys
keys = if(file.exists('api_keys.json')) {
fromJSON('api_keys.json')
} else {
list('app_id' = NULL, 'app_code' = NULL)
}
keys
file.exists('api_keys.json')
shiny::runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
keys
keys$id
runApp('Isochrone_R_app/Isochrone_app')
result
result$contentJSON
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
install.packages("htmlwidgets")
shiny::runApp('Isochrone_R_app/Isochrone_app')
install.packages("stringr")
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
#' sidebar_panel
#'
#' Sidebar panel for Shiny application.
#'
#' @return HTML
sidebar_panel = function() {
wellPanel(id = 'controls',
# origin #######################################################################################################
input_ui(input_id = 'origin',
input_element = textInput('origin', label = 'Origin:',
placeholder = 'Origin (e.g., 48.858132, 2.294515)', width = '100%'),
help = paste0('Center of the isoline request. Isoline will cover all roads which can be reached from ',
'this point within given range. Click on the map to select an origin or type a ',
'latitude/longitude separated by a comma.')),
# departure date ###############################################################################################
input_ui(input_id = 'departure',
input_element = airDatepickerInput('departure', label = 'Departure date:', width = '100%',
value = Sys.Date()),
help = paste0('Date when travel is expected to start. Traffic speed and incidents are taken into ',
'account when calculating the route. Departure time can be past, present or future.')),
# departure time ###############################################################################################
input_ui(input_id = 'time',
input_element = sliderInput('time', 'Time range: ', min = 0, max = 23, post = ':00', step = 1,
value = 17),
help = paste0('Time when travel is expected to start. Traffic speed and incidents are taken into ',
'account when calculating the route. Departure time can be past, present or future.'),
margin = 18),
# mode #########################################################################################################
input_ui(input_id = 'mode',
input_element = radioGroupButtons('mode', label = 'Mode:',
choices = c(`<img src="car.png", height = 14px>` = 'Car',
`<img src="transit2.png", height = 14px>` = 'Transit',
`<img src="bicycle.png", height = 14px>` = 'Bicycling',
`<img src="ped.png", height = 16px, style = "margin-top: -2px;">` = 'Pedestrian'),
selected = 'Car', justified = TRUE),
help = paste0('This option controls the mode type. Possible values are car (driving), transit (Bus, Subway), bicycle  or pedestrian ',
'(walking).'), margin = 8),
# range type ###################################################################################################
input_ui(input_id = 'range_type',
input_element = radioGroupButtons('range_type', label = 'Range type:',
choices = c('Time (minutes)', 'Distance (miles)'),
selected = 'Time (minutes)', justified = TRUE),
help = paste0('Specifies type of range. Possible values are distance or time. For distance the unit ',
'is miles. For time the unit is minutes.'), margin = 8),
# range ########################################################################################################
div(style = inline_block_css(),
column(5, style = 'padding-left: 0',
numericInput('min', label = 'Minimum range:', min = 1, step = 1, value = 5)
),
column(5, style = 'padding-left: 0; margin-left: 12px;',
numericInput('max', label = 'Maximum range:', min = 1, step = 1, value = 30)
),
column(1, style = 'margin-top: 4px; margin-left: 12px;',
br(),
actionButton('range_help', NULL, icon = icon('question', lib = 'font-awesome')),
bsPopover('range_help', placement = 'right', trigger = 'focus', title = NULL,
content = 'Range of isoline. For distance the unit is miles. For time the unit is minutes.')
)
),
# step #########################################################################################################
input_ui(input_id = 'step',
input_element = numericInput('step', label = 'Interval size:', min = 1, step = 1, value = 5),
help = paste0('Interval size between each isoline. For distance the unit is miles. For time the unit ',
'is minutes.')),
actionButton('request', label = 'Request isolines', width = '100%'),
downloadButton('download', label = 'Download results', class = list(width = '100%')) %>% hidden()
)
}
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
install.packages("sf")
library(sf)
install.packages("sf")
library(sf)
f <- st_read("isochrone_1.shp")
f <- st_read("isochrone_1.shp")
f <- st_read("/Users/gabrielfiastre/Isochrone_R_app/output/isochrone_1.shp")
f$area <- st_area(f) #Take care of units
f
f$area
ch='42, 53'
split(ch,",")
strip(ch,",")
str_split(ch,",")
str_trim(str_split(ch,","))
str_split(str_trim(ch),",")
str_trim(cgh)
str_trim(ch)
as.double(str_split(ch,","))
as.double(str_split(ch,",")[1])
as.double(str_split(ch,",")[2])
str_split(ch,",")
str_split(ch,",")[1]
str_split(ch,",")[1][1]
str_split(ch,",")[[1]
]
as.double(str_split(ch,",")[[1]])
as.double(str_split(ch,",")[[1]])[1]
as.double(str_split(ch,",")[[1]])[2]
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
install.packages("lutz")
runApp('Isochrone_R_app/Isochrone_app')
install.packages("lubridate")
runApp('Isochrone_R_app/Isochrone_app')
runApp()
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
error_message(session, 'Isoline requests exceeds maximum allowed (20). Reduce the number \
of requests by adujusting minimum range, maximum range or step \
size.')
runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp()
runApp('Isochrone_R_app/Isochrone_app')
result
result$contentParsed$results
result$contentParsed$results[[1]]$shapes[[1]]$shell
for e in result$contentParsed$results[[1]]$shapes[[1]]$shell :
for e in result$contentParsed$results[[1]]$shapes[[1]]$shell {}
for (e in result$contentParsed$results[[1]]$shapes[[1]]$shell) {}
for (e in result$contentParsed$results[[1]]$shapes[[1]]$shell) {
print(e$lat)
}
for (e in result$contentParsed$results[[1]]$shapes[[1]]$shell) {
lat<-append(lat,e$lat)
lng<-append(lng,e$lng)
}
print(lat)
print(lng)
lat<-c()
lng<-c()
for (e in result$contentParsed$results[[1]]$shapes[[1]]$shell) {
lat<-append(lat,e$lat)
lng<-append(lng,e$lng)
}
print(lat)
print(lng)
result$contentParsed$results
origin
rep(origin,length(data))
data
lenght(data)
length(data)
length(data)
legnth(gfsfgdsfgdfwg)
legnth(gfsfgdsfgdfwg)
length(gfsfgdsfgdfwg)
rep(c(0,1), length(data))
rep(c(0,1), length(data))
rep(c(0,1), length(dahjfjhjg))
rep(c(0,1),1
)
runApp('Isochrone_R_app/Isochrone_app')
install.packages("smoothr")
runApp('Isochrone_R_app/Isochrone_app')
runApp()
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
poly
runApp('Isochrone_R_app/Isochrone_app')
runApp()
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
poly_test
runApp('Isochrone_R_app/Isochrone_app')
poly_test
runApp('Isochrone_R_app/Isochrone_app')
poly_test
runApp('Isochrone_R_app/Isochrone_app')
runApp()
runApp('Isochrone_R_app/Isochrone_app')
runApp()
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
install.packages("colourvalues")
runApp('Isochrone_R_app/Isochrone_app')
runApp()
runApp('Isochrone_R_app/Isochrone_app')
library(colourvalues)
magma()
colourvalues::magma
install.packages("viridis")
runApp('Isochrone_R_app/Isochrone_app')
magma(3,end=0.8)
runApp('Isochrone_R_app/Isochrone_app')
as.double("1.2212123133232231",3)
as.double("1.2212123133232231",digits=10)
as.double("1.2212123133232231",option(digits=10))
help(as.double())
help(as.double
)
as.numeric("1.2212123133232231")
runApp('Isochrone_R_app/Isochrone_app')
as.double("1.2212123133232231",option(digits=10))
as.double("1.2212123133232231",option=optionsdigits=10))
as.double("1.2212123133232231",option=options=digits=10))
as.double("1.2212123133232231",option=options(digits=10))
help(as.numeric)
help(base::as.numeric)
help(base:as.numeric)
as.numeric("1.2212123133232231",length=10)
as.numeric("1.2212123133232231",length=16)
as.numeric("1.2212123133232231",length=4)
as.numeric(4,"1.2212123133232231")
install.packages("Rmpfr")
library(Rmpfr)
library(Rmpfr)
runApp('Isochrone_R_app/Isochrone_app')
mpfr("1.2212123133232231")
mpfr("1.2212123133232231")[1]
mpfr("1.2212123133232231")[1]
x=mpfr
x
x=mpfr("1.2212123133232231")
x
as.double(x)
formatted_departure = format_time(departure, origin)
runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
ch
test="0.123456789"
as.double(test)
as.double(test,length=3)
as.double(test,length=1)
as.double(test,length=9)
double(test)
double(lenght=9)
double(length=9)
x=double(length = 9)
x
x[1]
x[1]=as.numeric(ch)
x[1]=as.numeric(test)
x
test
test="0.123456789123456"
as.numeric(test)
round(as.numeric(test),9)
options(digits = 12)
x
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
poly_test
poly()
runApp('Isochrone_R_app/Isochrone_app')
runApp()
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
keys
keys$id
runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
shiny::runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
runApp('Isochrone_R_app/Isochrone_app')
